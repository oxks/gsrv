// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: datum.sql

package postgres

import (
	"context"
	"database/sql"
	"time"
)

const datumAdd = `-- name: DatumAdd :exec
INSERT INTO "public"."datum" ("author_id", "datum", "hash", "created_at", "previous_hash") 
VALUES ($1, $2, $3, $4, $5)
`

type DatumAddParams struct {
	AuthorID     int64          `json:"author_id"`
	Datum        string         `json:"datum"`
	Hash         sql.NullString `json:"hash"`
	CreatedAt    time.Time      `json:"created_at"`
	PreviousHash sql.NullString `json:"previous_hash"`
}

func (q *Queries) DatumAdd(ctx context.Context, arg DatumAddParams) error {
	_, err := q.db.ExecContext(ctx, datumAdd,
		arg.AuthorID,
		arg.Datum,
		arg.Hash,
		arg.CreatedAt,
		arg.PreviousHash,
	)
	return err
}

const getDatums = `-- name: GetDatums :many
SELECT
datum.id, author_id, datum, previous_hash, hash, datum.created_at, users.id, firstname, lastname, email, password, deleted, nickname, users.created_at
FROM
	datum
	INNER JOIN
	users
	ON 
		datum.author_id = users."id"
ORDER BY
	datum."id" DESC
`

type GetDatumsRow struct {
	ID           int64          `json:"id"`
	AuthorID     int64          `json:"author_id"`
	Datum        string         `json:"datum"`
	PreviousHash sql.NullString `json:"previous_hash"`
	Hash         sql.NullString `json:"hash"`
	CreatedAt    time.Time      `json:"created_at"`
	ID_2         int64          `json:"id_2"`
	Firstname    string         `json:"firstname"`
	Lastname     string         `json:"lastname"`
	Email        string         `json:"email"`
	Password     string         `json:"password"`
	Deleted      bool           `json:"deleted"`
	Nickname     string         `json:"nickname"`
	CreatedAt_2  time.Time      `json:"created_at_2"`
}

func (q *Queries) GetDatums(ctx context.Context) ([]GetDatumsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDatums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDatumsRow
	for rows.Next() {
		var i GetDatumsRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Datum,
			&i.PreviousHash,
			&i.Hash,
			&i.CreatedAt,
			&i.ID_2,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.Deleted,
			&i.Nickname,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
