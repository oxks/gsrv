// Code generated by sqlc-grpc (https://github.com/walterwanderley/sqlc-grpc).

package main

import (
	"context"
	"database/sql"
	_ "embed"
	"fmt"
	"os"
	"os/signal"
	"runtime"
	"syscall"

	"go.uber.org/automaxprocs/maxprocs"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	// database driver
	_ "github.com/jackc/pgx/v4/stdlib"
	"github.com/joho/godotenv"

	"immut-api/internal/server"
	"immut-api/internal/server/trace"
)

//go:generate sqlc-grpc -m gsrv/postgres/postgres -append

const serviceName = "immut-api"

var (
	dbURL string

	//go:embed api/apidocs.swagger.json
	openAPISpec []byte
)

func main() {
	cfg := server.Config{
		ServiceName: serviceName,
	}
	var dev bool

	// the var definition section below will be replaced by sqlc-grpc

	err := godotenv.Load()
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	dbPassword := os.Getenv("POSTGRES_PASSWORD")
	dbHost := os.Getenv("POSTGRES_HOST")
	dbPort := os.Getenv("POSTGRES_PORT")

	dbURL = "postgres://postgres:" + dbPassword + "@" + dbHost + ":" + dbPort + "/immut?sslmode=disable"

	cfg.Port = 8080
	cfg.PrometheusPort = 0   // 8081
	cfg.JaegerCollector = "" // "http://localhost:30068/api/traces"
	cfg.Cert = ""
	cfg.Key = ""
	cfg.EnableCors = false
	cfg.EnableGrpcUI = true
	dev = false

	log := logger(dev)
	defer log.Sync()

	if err := run(cfg, log); err != nil && err.Error() != "mux: server closed" {
		log.Error("server error", zap.Error(err))
		os.Exit(1)
	}
}

func run(cfg server.Config, log *zap.Logger) error {
	if _, err := maxprocs.Set(); err != nil {
		log.Warn("startup", zap.Error(err))
	}
	log.Info("startup", zap.Int("GOMAXPROCS", runtime.GOMAXPROCS(0)))

	db, err := sql.Open("pgx", dbURL)
	if err != nil {
		return err
	}
	if cfg.TracingEnabled() {
		flush, err := trace.InitTracer(context.Background(), serviceName, cfg.JaegerCollector)
		if err != nil {
			return err
		}
		defer flush()

		db, err = trace.OpenDB(db.Driver(), dbURL)
		if err != nil {
			return err
		}
	}

	srv := server.New(cfg, log, registerServer(log, db), registerHandlers(), openAPISpec)

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		log.Warn("signal detected...", zap.Any("signal", sig))
		srv.Shutdown()
	}()
	return srv.ListenAndServe()
}

func logger(dev bool) *zap.Logger {
	var config zap.Config
	if dev {
		config = zap.NewDevelopmentConfig()
		config.EncoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder
	} else {
		config = zap.NewProductionConfig()
	}
	config.OutputPaths = []string{"stdout"}
	config.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	config.DisableStacktrace = true
	config.InitialFields = map[string]interface{}{
		"service": serviceName,
	}

	log, err := config.Build()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	return log
}
